#include <iostream>
#include <cstring>

using namespace std;

int main () {

  char str[] = "This is simple string";
   char* sh;
   sh = strchr(str, 's');

  cout<<"zero based indexing = "<<(sh - str)<<endl;
  cout<<"human readable indexing = "<<((sh - str)+1);
  
   return 0;
}

output
```````
zero based indexing = 3
human readable indexing = 4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sure — let’s go through your code **line by line** so you see exactly what’s happening.

---

### **Code Breakdown**

```cpp
#include <iostream>
#include <cstring>
using namespace std;
```

* **`#include <iostream>`** → lets you use `cout` and `cin` for input/output.
* **`#include <cstring>`** → includes C-string functions such as `strchr()`.
* **`using namespace std;`** → allows you to use names like `cout` without `std::cout`.

---

```cpp
char str[] = "This is simple string";
```

* Creates a **mutable C-string** (character array) with the contents `"This is simple string"`.
* Internally, it ends with a null character (`'\0'`) to mark the string’s end.

---

```cpp
char* sh;
```

* Declares a **pointer to char**.
* This will be used to store the **address** of each found `'s'` in the string.

---

```cpp
cout << "Searching for the character 's' in the given string i.e. \"" 
     << str << "\"" << endl;
```

* Prints a message, showing which character and string we’re searching in.
* The `\"` is an escape sequence to print double quotes in the output.

---

```cpp
sh = strchr(str, 's');
```

* `strchr()` searches for the **first occurrence** of `'s'` in `str`.
* If found → returns a pointer to that position in the string.
* If not found → returns `NULL`.

Example:
`str` = `"This is simple string"`
First `'s'` is at **index 3** (4th position, since indexing starts at 0).

So here, `sh` now points to:

```
"This is simple string"
   ^
   sh points here
```

---

```cpp
while (sh != NULL) 
{
    cout << "Found at position- " << (sh - str + 1) << endl;
    sh = strchr(sh + 1, 's');
}
```

* The `while` loop runs as long as `'s'` is found.
* `(sh - str)` → subtracts the **starting address** of the string from the **address of found char**, giving the **index**.
* `+ 1` → converts it from 0-based index to **1-based position** (human-readable).
* `sh = strchr(sh + 1, 's');` → searches again starting **from the next character** after the current `'s'`.

---

**How it works step-by-step** for `"This is simple string"`:

1. **First call** → finds `'s'` at position 4
   Prints: `Found at position- 4`
   Searches from index 4+1 → finds next `'s'`.
2. **Second call** → finds `'s'` at position 7
   Prints: `Found at position- 7`
   Searches from index 7+1.
3. **Third call** → finds `'s'` at position 9
   Prints: `Found at position- 9`
   Searches from index 9+1.
4. **Fourth call** → finds `'s'` at position 16
   Prints: `Found at position- 16`
   Searches from index 16+1 → no more `'s'`, so returns `NULL`.
5. Loop ends.

---

### **Final Output**

```
Searching for the character 's' in the given string i.e. "This is simple string"
Found at position- 4
Found at position- 7
Found at position- 9
Found at position- 16
```

---

If you’d like, I can also **rewrite this in modern C++ using `std::string::find()`** so you don’t have to work with raw pointers and `strchr`. That would make it safer and cleaner.
